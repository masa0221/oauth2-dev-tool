#!/bin/bash

for require_command in "jq" "nkf"
do
    if !(type ${require_command} > /dev/null 2>&1); then
        echo "Please install ${require_command}"
        exit 1
    fi
done


function auth {
    open $(get_login_url)
}

function get_login_url {
    echo "${LOGIN_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=$(get_redirect_uri)&state=foobar&scope=${SCOPE}"
}

function get_redirect_uri {
    echo "${REDIRECT_URI}" | nkf -WwMQ | sed 's/=$//g' | tr = % | tr -d '\n'
}

function request_token {
    local authorization=$(echo -n "${CLIENT_ID}:${CLIENT_SECRET}" | base64)
    local response=$(curl -s -X POST \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -H "Authorization: Basic ${authorization}" \
        -d "grant_type=authorization_code&redirect_uri=$(get_redirect_uri)&code=${1}" \
        "${TOKEN_ENDPOINT}")

    local refresh_token=$(echo $response | jq -r .refresh_token)
    add_refresh_token ${refresh_token}

    echo ${response}
}

function refresh_token {
    local response=$(
        curl -s -X POST \
            --user "${CLIENT_ID}:${CLIENT_SECRET}" \
            -d "grant_type=refresh_token&refresh_token=${REFRESH_TOKEN}&scope=${SCOPE}" "${TOKEN_ENDPOINT}"
    )

    local refresh_token=$(echo $response | jq -r .refresh_token)
    if [ "${refresh_token}" != "null" ]; then
        add_refresh_token ${refresh_token}
    fi

    echo ${response}
}

function add_refresh_token {
    if grep -q "REFRESH_TOKEN" ${CONFIG_FILE}; then
        sed -i '' -e "s/\(REFRESH_TOKEN *= *\"\).*\(\"\)/\1${1}\2/g" ${CONFIG_FILE}
    else
        echo "REFRESH_TOKEN=\"${1}\"" >> ${CONFIG_FILE}
    fi
}

function create_config {
    local create_client_name=${1:-${CLIENT_NAME}}
    local create_config_file="${CONFIG_PATH}/${create_client_name}"
    local client_var_names=(
        CLIENT_ID
        CLIENT_SECRET
        REDIRECT_URI
        SCOPE
        LOGIN_URL
        TOKEN_ENDPOINT
    )
    if [ -e ${create_config_file} ]; then
        echo "Config file is already exist (${create_config_file})"
        read -p "Are you sure over write?[y/n]: " WRITE_OK
        case "$WRITE_OK" in
          [nN]) exit 1 ;;
        esac
        . ${create_config_file}
    else
        # clear default settings
        for client_var_name in ${client_var_names[@]}; do
            unset "${client_var_name}"
        done
    fi
    
    for client_var_name in ${client_var_names[@]}; do
        local before_value=${!client_var_name}
        read -p "${client_var_name}[${before_value:-"None"}]: " INPUT_VALUE
        eval ${client_var_name}=\"${INPUT_VALUE:-${!client_var_name}}\"
        if [ "${!client_var_name}" == "" ]; then
            echo "${client_var_name} is require"
            exit 1
        fi
    done

    mkdir -p ${CONFIG_PATH}
cat << EOT > ${create_config_file}
CLIENT_ID="${CLIENT_ID}"
CLIENT_SECRET="${CLIENT_SECRET}"
REDIRECT_URI="${REDIRECT_URI}"
SCOPE="${SCOPE}"
LOGIN_URL="${LOGIN_URL}"
TOKEN_ENDPOINT="${TOKEN_ENDPOINT}"
EOT
    echo "Created! (${create_config_file})"
}

function list_config {
    for config_file in $(ls ${CONFIG_PATH}); do
        local client_id=$(grep CLIENT_ID "${CONFIG_PATH}/${config_file}" | sed -e 's/CLIENT_ID="\([^"]*\)"/\1/g')
        echo $(basename ${config_file})" (${client_id})"
    done
}

function exist_config {
    local config_file=${1}
    if [ ! -e ${config_file} ];then
        echo "The specified client config file is not found"
        exit 1
    fi
}

function show_config {
    local config_file="${CONFIG_PATH}/${1}"
    exist_config ${config_file}
    cat ${config_file}
}

function delete_config {
    local config_file="${CONFIG_PATH}/${1}"
    exist_config ${config_file}
    rm -i ${config_file}
}

function usage_exit {
    usage
    exit 0
}

function usage {
    cat <<EOF
$(basename ${0}) is a tool for OAuth 2.0 development

Usage:
    $(basename ${0}) client create [NAME]  Create client config file
    $(basename ${0}) client list           Display list of clients
    $(basename ${0}) client show NAME      Show config of specified client
    $(basename ${0}) client delete NAME    Delete config of specified client
    $(basename ${0}) new [NAME]            Alias command of client new
    $(basename ${0}) auth                  Open authorize and authentication URL
    $(basename ${0}) token CODE|refresh    Issue token or Reissue token
                                The subcommand reflesh can be get new token using by reflesh token when already issue token.

Options:
    -n                   Specifiy client config file name
    -h                   print this
EOF
}

while getopts n:h OPT
do
    case ${OPT} in
        n)
            INPUT_CLIENT_NAME=${OPTARG}
            ;;
        h)  
            usage_exit
            ;;
    esac
done

shift $((OPTIND - 1))

CLIENT_NAME=${INPUT_CLIENT_NAME:-"default"}
CONFIG_PATH="${HOME}/.$(basename ${0})"
CONFIG_FILE="${CONFIG_PATH}/${CLIENT_NAME}"

if [ -e ${CONFIG_FILE} ]; then
    . ${CONFIG_FILE}
else
    create_config
    usage_exit
fi

COMMAND=${1}
if [ -z ${COMMAND} ]; then
    usage_exit
elif [ "${COMMAND}" == "new" ]; then
    create_config ${2:-${CLIENT_NAME}}
elif [ "${COMMAND}" == "client" ]; then
    SUB_COMMAND=${2}
    if [ "${SUB_COMMAND}" == "create" ]; then
        create_config ${3:-${CLIENT_NAME}}
    elif [ "${SUB_COMMAND}" == "list" ]; then
        list_config
    elif [ "${SUB_COMMAND}" == "show" ]; then
        show_config ${3:-${CLIENT_NAME}}
    elif [ "${SUB_COMMAND}" == "delete" ]; then
        delete_config ${3:-${CLIENT_NAME}}
    else
        usage_exit
    fi
elif [ "${COMMAND}" == "auth" ]; then
    auth
elif [ "${COMMAND}" == "token" ]; then
    if [ "${2}" == "refresh" ]; then
        if [ "${REFRESH_TOKEN}" == "" ]; then
            echo "There is no REFRESH_TOKEN. Please use token command."
            exit 1
        else
            refresh_token
        fi
    else
        request_token ${2}
    fi
else
    usage_exit
fi

